#!/usr/bin/env python
# Copyright 2018 ACSONE SA/NV
# License AGPL-3.0 or later (https://www.gnu.org/licenses/agpl).

from __future__ import print_function
from contextlib import contextmanager
import os
import subprocess

from test_server import setup_server, get_addons_path, \
    get_server_path, get_addons_to_check, create_server_conf, get_server_script
from . import getaddons

@contextmanager
def setenv(key, value):
    old_value = os.environ.get(key)
    os.environ[key] = value
    try:
        yield
    finally:
        if old_value:
            os.environ[key] = old_value
        else:
            del os.environ[key]


def commit_if_needed(paths, message, cwd="."):
    paths = [os.path.realpath(p) for p in paths]
    cmd = ["git", "add", "-f", "--"] + paths
    subprocess.check_call(cmd, cwd=cwd)
    cmd = ["git", "diff", "--quiet", "--exit-code", "--cached", "--"] + paths
    r = subprocess.call(cmd, cwd=cwd)
    if r != 0:
        cmd = ["git", "commit", "-m", message, '--no-verify', "--"] + paths
        subprocess.check_call(cmd, cwd=cwd)
        return True
    else:
        return False

def main(argv=None, database=None):
    odoo_full = os.environ.get("ODOO_REPO", "odoo/odoo")
    odoo_version = os.environ.get("VERSION")
    odoo_exclude = os.environ.get("EXCLUDE")
    odoo_include = os.environ.get("INCLUDE")
    odoo_unittest = False
    install_options = os.environ.get("INSTALL_OPTIONS", "").split()
    travis_home = os.environ.get("HOME", "~/")
    travis_dependencies_dir = os.path.join(travis_home, 'dependencies')
    travis_build_dir = os.environ.get("TRAVIS_BUILD_DIR", "../..")
    server_path = get_server_path(odoo_full, odoo_version, travis_home)
    addons_path = get_addons_path(travis_dependencies_dir,
                                  travis_build_dir,
                                  server_path)
    addons_list = get_addons_to_check(travis_build_dir, odoo_include,
                                      odoo_exclude)
    addons = ','.join(addons_list)
    create_server_conf({'addons_path': addons_path}, odoo_version)

    print("\nWorking in %s" % travis_build_dir)
    print("Using repo %s and addons path %s" % (odoo_full, addons_path))

    if not database:
        database = 'openerp_i18n'
        print("\nInitializing db %s to generate .pot for: %s" % (database, addons))
        script_name = get_server_script(server_path)
        setup_server(database, odoo_unittest, addons_list, server_path,
                     script_name, addons_path, install_options, addons_list)
    else:
        print("\nUsing db %s to generate .pot" % (database, ))

    subprocess.check_call([
        'git', 'config', 'user.name', os.environ['GITHUB_USER'],
    ])
    subprocess.check_call([
        'git', 'config', 'user.email', os.environ['GITHUB_EMAIL'],
    ])

    print("Installing click-odoo-contrib")
    r = subprocess.call([
        'pip', 'install', 'click-odoo-contrib',
    ])
    if r:
        return r

    print("Addons: %s" % addons)
    with setenv('PYTHONPATH', server_path):
        print("Exporting .pot files")
        subprocess.call(['ls', '-al'])
        r = subprocess.call([
            'click-odoo-makepot',
            '-d', database,
            '--msgmerge-if-new-pot',
            #'--commit',
            '--log-level=debug',
            #'--commit-message="[ci skip] Update {addon_name}.pot"',
        ])
        if r:
            print("Error on click-odoo-makepot")
            subprocess.call(['git', 'status'])
            subprocess.call(['ls', '-al'])
            return r

    subprocess.call(['git', 'status'])
    subprocess.call(['ls', '-al'])
    
    for addon in addons_list:
        pot_filepath = os.path.join(addon, 'i18n', addon + '.pot'
        if os.path.exists(pot_filepath)
            files_to_commit = set()
            files_to_commit.add(pot_filepath)
            commit_if_needed(
                list(files_to_commit),
                commit_message.format(addon_name=addon),
            )

    if os.environ.get('BITBUCKET_REPO'):
        
        r = False
        if os.environ.get('CI_COMMIT_REF_NAME'):
            print("Pull from Bitbucket - CI REF")
            r = subprocess.call([
                'git', 'pull',
                '{BITBUCKET_REPO}'.format(**os.environ),
                'HEAD:{CI_COMMIT_REF_NAME}'.format(**os.environ),
            ])
            print("Pushing .pot files changes to Bitbucket - CI REF")
            r = subprocess.call([
                'git', 'push',
                '{BITBUCKET_REPO}'.format(**os.environ),
                'HEAD:{CI_COMMIT_REF_NAME}'.format(**os.environ),
            ])
        else:
            print("Pushing .pot files changes to Bitbucket - TRAVIS BRANCH")
            r = subprocess.call([
                'git', 'push',
                '{BITBUCKET_REPO}'.format(**os.environ),
                'HEAD:{TRAVIS_BRANCH}'.format(**os.environ),
            ])
            
        if r:
            print("Error on git PUSH")
            return r
    elif os.environ.get('GIT_HOST'):
        print("Pushing .pot files changes to ", os.environ.get('GIT_HOST'))
        r = subprocess.call([
            'git', 'push',
            'https://{GITHUB_USER}:{GITHUB_TOKEN}@{GIT_HOST}/'
            '{TRAVIS_REPO_SLUG}'.format(**os.environ),
            'HEAD:{TRAVIS_BRANCH}'.format(**os.environ),
        ])
        if r:
            print("Error on git PUSH")
            return r
    
    else:
        print("Pushing .pot files changes to GitHub")
        r = subprocess.call([
            'git', 'push',
            'https://{GITHUB_USER}:{GITHUB_TOKEN}@github.com/'
            '{TRAVIS_REPO_SLUG}'.format(**os.environ),
            'HEAD:{TRAVIS_BRANCH}'.format(**os.environ),
        ])
        if r:
            print("Error on git PUSH")
            return r

    return 0


if __name__ == "__main__":
    import sys
    database = None
    if len(sys.argv) > 1:
        database = sys.argv[1]
    exit(main(database=database))
